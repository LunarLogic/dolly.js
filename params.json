{"name":"Dolly.js","tagline":"","body":"Dolly.js - Clone your tables easily\r\n===================================\r\n\r\nDolly.js is a simple and generic jQuery UI widget that adds excel-like cloning functionality to your tables. It works with any tabular structure (not only semantic html tables) and does not make any assumptions about the underlying data structure. It handles the UI part of cloning only - the implementation of business cloning logic is left to the widget's users.\r\n\r\nUsage\r\n-----\r\n\r\nCall the `dolly` method on every table cell that should have cloning functionality. Then listen on `cloned` event to handle the data-related part of cloning.\r\n\r\n```\r\n$('td').dolly({\r\n  cloned: function (event, ui) {\r\n    console.log(this, \"has been cloned \" + ui.cloneX + \" cells horizontally and \" + ui.cloneY + \" vertically.\");\r\n  }\r\n});\r\n```\r\nYou can find more elaborate examples in the `examples` directory.\r\n\r\nOptions\r\n-------\r\n\r\n####rowSelector\r\n\r\njQuery selector for elements that should be considered the rows of the table. Defaults to `\"tr\"`. Example:\r\n\r\n```\r\n$(cell).dolly({\r\n  rowSelector: 'div.row',\r\n  cellSelector: 'div.cell'\r\n});\r\n```\r\n\r\n####cellSelector\r\n\r\njQuery selector for elements that should be considered the cells of the table. Defaults to `\"td\"`. Example:\r\n\r\n```\r\n$(cell).dolly({\r\n  rowSelector: 'div.row',\r\n  cellSelector: 'div.cell'\r\n});\r\n```\r\n####boxStyle\r\n\r\nObject with custom CSS styles assigned to the selection box displayed when user clones cells. For example:\r\n\r\n```\r\n$(cell).dolly({\r\n  boxStyle: {\r\n    \"background-color\": \"rgba(255, 0, 0, 0.2)\",\r\n     border: \"3px red dotted\"\r\n  }\r\n});\r\n```\r\nwill result in a selection box like this:\r\n\r\n![red clone box](http://blog.lunarlogic.io/wp-content/uploads/redbox.png)\r\n\r\nYou can also style this with CSS `dolly-box` class.\r\n\r\n####handleStyle\r\n\r\nObject with custom CSS styles assigned to the handle of the cloning box.\r\n\r\n```\r\n$(cell).dolly({\r\n  handleStyle: {\r\n    width: \"0\",\r\n    height: \"0\",\r\n    \"background-color\": \"transparent\",\r\n    \"border-top\": \"7px solid transparent\",\r\n    \"border-left\": \"7px solid transparent\",\r\n    \"border-bottom\": \"7px solid black\",\r\n    \"border-right\": \"7px solid black\",\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nwill result in a triangular handle like this:\r\n\r\n![triangular dolly handle](http://blog.lunarlogic.io/wp-content/uploads/triangular-dolly-handle.png)\r\n\r\nYou can also style this with CSS `dolly-handle` class.\r\n\r\nEvents\r\n------\r\n\r\nIn all event callbacks `this` is bound to the origin HTML cell element.\r\n\r\n####Contents of `ui` object\r\n\r\nThe `ui` object is passed as the second argument to every callback. It contains:\r\n\r\n* `originX` - position of cell in row that triggered the event (0-indexed).\r\n* `originY` - position of row containing cell that triggered the event (0-indexed).\r\n* `cloneX` - number of cells selected for cloning horizontally. Negative values stand for cloning to the left, positive to the right.\r\n* `cloneY` - number of cells selected for cloning vertically. Negative values stand for cloning up, positive for cloning down.\r\n\r\n####cloned\r\n\r\nTriggered whenever user requests cloning of a cell. You can pass a callback during dolly initialization like this:\r\n\r\n```\r\n$(cell).dolly({\r\n  cloned: function (event, ui) {\r\n    ...\r\n  }\r\n});\r\n```\r\n\r\nor listen on `dollycloned` event: \r\n\r\n```\r\n$(cell).dolly().on('dollycloned', function (event, ui) {...});\r\n```\r\n\r\n####selected\r\n\r\nTriggered whenever the size of selection box changes. This does not mean a clone request, just a user moving the handle. After user releases the handle, `cloned` event is triggered.\r\n\r\nOnce again you can pass a callback directly or listen on `dollyselected` event.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}